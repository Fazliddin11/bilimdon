{"remainingRequest":"C:\\togo\\bilimdon\\ui\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\togo\\bilimdon\\ui\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!C:\\togo\\bilimdon\\ui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\togo\\bilimdon\\ui\\src\\views\\3x3.vue?vue&type=template&id=9db8f5f8&scoped=true&","dependencies":[{"path":"C:\\togo\\bilimdon\\ui\\src\\views\\3x3.vue","mtime":1640582452706},{"path":"C:\\togo\\bilimdon\\ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\togo\\bilimdon\\ui\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\togo\\bilimdon\\ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\togo\\bilimdon\\ui\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}